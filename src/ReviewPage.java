
import java.util.ArrayList;
import javax.swing.*;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.Component;
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import java.awt.ComponentOrientation;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ayubs
 */
public class ReviewPage extends javax.swing.JFrame {

    /**
     * Creates new form ReviewPage
     */
    ArrayList<Element> fullElements;  //a list of all the elements in the periodic table
    ArrayList<Element> printedList;  //list of the elemnts that are currently being displayed
    public ReviewPage(List temp) {
        fullElements = new ArrayList<Element>();
        printedList = new ArrayList<Element>();
        
        initComponents();
        this.setSize(900, 500 );
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        convertNodestoList(temp); //this smethod will convert the nodes into an araylist and print them on screen
        generateGraphics();
    }
    
    public void generateGraphics(){
        displayElementInfo.setLineWrap(true);
        
        allElementsButton.setBorder(null);
        allElementsButton.setOpaque(false);
        allElementsButton.setContentAreaFilled(false); 
        
        transitionMetalsButton.setBorder(null);
        transitionMetalsButton.setOpaque(false);
        transitionMetalsButton.setContentAreaFilled(false); 
        
        alkaliButton.setBorder(null);
        alkaliButton.setOpaque(false);
        alkaliButton.setContentAreaFilled(false); 
        
        halogensButton.setBorder(null);
        halogensButton.setOpaque(false);
        halogensButton.setContentAreaFilled(false); 
        
        gasesButton.setBorder(null);
        gasesButton.setOpaque(false);
        gasesButton.setContentAreaFilled(false); 
        
        actinidesButton.setBorder(null);
        actinidesButton.setOpaque(false);
        actinidesButton.setContentAreaFilled(false); 
        
        lanthenidesButton.setBorder(null);
        lanthenidesButton.setOpaque(false);
        lanthenidesButton.setContentAreaFilled(false); 
        
        BackToHomepage.setBorder(null);
        BackToHomepage.setOpaque(false);
        BackToHomepage.setContentAreaFilled(false); 
        
        jScrollPane2.setOpaque(false);
        jScrollPane2.getViewport().setOpaque(false);
        jScrollPane2.setBorder(null);
        jScrollPane2.setViewportBorder(null);
        
        displayElementInfo.setBorder(null);
        displayElementInfo.setBackground(new java.awt.Color(0,0,0,1));
    }
    
    public void convertNodestoList(List temp){
        Element curr = temp.head;
        while(curr != null){
            fullElements.add(curr);
            curr = curr.next;
        }
        printedList = fullElements;
        displayElements();
    }
 
    public void displayElements(){ //this method uses the printedList to print on the screen

        
        currentDisplayedList.setOpaque(false);
        DefaultListCellRenderer renderer = new DefaultListCellRenderer();
        renderer.setOpaque( false );
        currentDisplayedList.setCellRenderer( renderer );
        currentDisplayedList.setBackground(new Color(0, 0, 0, 1));

        currentDisplayedList.setCellRenderer(new TransparentListCellRenderer());
        currentDisplayedList.setOpaque(false);
        currentDisplayedList.setSelectionBackground(new java.awt.Color(211,211,211,64));
        jScrollPane3.setOpaque(false);
        jScrollPane3.getViewport().setOpaque(false);
        
        DefaultListModel mk = new DefaultListModel();
        for(int i = 0 ;i< printedList.size(); i++){
            mk.addElement(printedList.get(i).getName());
        }
        currentDisplayedList.setModel(mk);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayElementInfo = new javax.swing.JTextArea();
        BackToHomepage = new javax.swing.JButton();
        halogensButton = new javax.swing.JButton();
        gasesButton = new javax.swing.JButton();
        actinidesButton = new javax.swing.JButton();
        lanthenidesButton = new javax.swing.JButton();
        alkaliButton = new javax.swing.JButton();
        transitionMetalsButton = new javax.swing.JButton();
        sortTypeSelected = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        allElementsButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        currentDisplayedList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Review Page");
        setAlwaysOnTop(true);
        setMaximumSize(new java.awt.Dimension(900, 500));
        setMinimumSize(new java.awt.Dimension(900, 500));
        setResizable(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                cursorButtonChangeColor(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseExitChangeColor(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tableImage.jpg"))); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 80, 300, 180));

        jScrollPane2.setBorder(null);

        displayElementInfo.setEditable(false);
        displayElementInfo.setBackground(new java.awt.Color(153, 153, 153));
        displayElementInfo.setColumns(20);
        displayElementInfo.setFont(new java.awt.Font("Palatino Linotype", 0, 18)); // NOI18N
        displayElementInfo.setForeground(new java.awt.Color(255, 255, 255));
        displayElementInfo.setRows(5);
        displayElementInfo.setAutoscrolls(false);
        displayElementInfo.setSelectionColor(new java.awt.Color(102, 102, 102));
        jScrollPane2.setViewportView(displayElementInfo);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 270, 300, 178));

        BackToHomepage.setBackground(new java.awt.Color(153, 153, 153));
        BackToHomepage.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BackToHomepage.setForeground(new java.awt.Color(255, 255, 255));
        BackToHomepage.setText("Main Menu");
        BackToHomepage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BackToHomepage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BackToHomepage.setIconTextGap(1);
        BackToHomepage.setMargin(new java.awt.Insets(1, 14, 1, 14));
        BackToHomepage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cursorButtonChangeColor(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseExitChangeColor(evt);
            }
        });
        BackToHomepage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToHomepageActionPerformed(evt);
            }
        });
        getContentPane().add(BackToHomepage, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 120, 30));

        halogensButton.setBackground(new java.awt.Color(153, 153, 153));
        halogensButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        halogensButton.setForeground(new java.awt.Color(255, 255, 255));
        halogensButton.setText("Halogens");
        halogensButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        halogensButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        halogensButton.setIconTextGap(1);
        halogensButton.setMargin(new java.awt.Insets(1, 14, 1, 14));
        halogensButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cursorButtonChangeColor(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseExitChangeColor(evt);
            }
        });
        halogensButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                halogensButtonActionPerformed(evt);
            }
        });
        getContentPane().add(halogensButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 120, 30));

        gasesButton.setBackground(new java.awt.Color(153, 153, 153));
        gasesButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        gasesButton.setForeground(new java.awt.Color(255, 255, 255));
        gasesButton.setText("Noble Gases");
        gasesButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gasesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gasesButton.setIconTextGap(1);
        gasesButton.setMargin(new java.awt.Insets(1, 14, 1, 14));
        gasesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cursorButtonChangeColor(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseExitChangeColor(evt);
            }
        });
        gasesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gasesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(gasesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 120, 30));

        actinidesButton.setBackground(new java.awt.Color(153, 153, 153));
        actinidesButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        actinidesButton.setForeground(new java.awt.Color(255, 255, 255));
        actinidesButton.setText("Actinides");
        actinidesButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        actinidesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        actinidesButton.setIconTextGap(1);
        actinidesButton.setMargin(new java.awt.Insets(1, 14, 1, 14));
        actinidesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cursorButtonChangeColor(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseExitChangeColor(evt);
            }
        });
        actinidesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actinidesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(actinidesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, 120, 30));

        lanthenidesButton.setBackground(new java.awt.Color(153, 153, 153));
        lanthenidesButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lanthenidesButton.setForeground(new java.awt.Color(255, 255, 255));
        lanthenidesButton.setText("Lanthenides");
        lanthenidesButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lanthenidesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lanthenidesButton.setIconTextGap(1);
        lanthenidesButton.setMargin(new java.awt.Insets(1, 14, 1, 14));
        lanthenidesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cursorButtonChangeColor(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseExitChangeColor(evt);
            }
        });
        lanthenidesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lanthenidesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(lanthenidesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 120, 30));

        alkaliButton.setBackground(new java.awt.Color(153, 153, 153));
        alkaliButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        alkaliButton.setForeground(new java.awt.Color(255, 255, 255));
        alkaliButton.setText("Alkali Metals");
        alkaliButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        alkaliButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alkaliButton.setIconTextGap(1);
        alkaliButton.setMargin(new java.awt.Insets(1, 14, 1, 14));
        alkaliButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cursorButtonChangeColor(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseExitChangeColor(evt);
            }
        });
        alkaliButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alkaliButtonActionPerformed(evt);
            }
        });
        getContentPane().add(alkaliButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 120, 30));

        transitionMetalsButton.setBackground(new java.awt.Color(153, 153, 153));
        transitionMetalsButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        transitionMetalsButton.setForeground(new java.awt.Color(255, 255, 255));
        transitionMetalsButton.setText("Transition Metals");
        transitionMetalsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        transitionMetalsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transitionMetalsButton.setIconTextGap(1);
        transitionMetalsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cursorButtonChangeColor(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseExitChangeColor(evt);
            }
        });
        transitionMetalsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transitionMetalsButtonActionPerformed(evt);
            }
        });
        getContentPane().add(transitionMetalsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 150, 140, 30));

        sortTypeSelected.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Name Ascending", "Name Descending", "Symbol Ascending", "Symbol Descending", "Increasing Atomic Number", "Decreasing Atomic Number", "Increasing Atomic Weight", "Decreasing Atomic Weight", "Increasing Melting Point", "Decreasing Melting Point", "Increasing Boiling Point", "Decreasing Boiling Point" }));
        sortTypeSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortTypeSelected(evt);
            }
        });
        getContentPane().add(sortTypeSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, 290, 20));

        jLabel4.setFont(new java.awt.Font("Palatino Linotype", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Sort By: ");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 60, 20));

        jLabel3.setFont(new java.awt.Font("Palatino Linotype", 1, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Periodic Table Made Easy");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 580, 70));

        allElementsButton.setBackground(new java.awt.Color(153, 153, 153));
        allElementsButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        allElementsButton.setForeground(new java.awt.Color(255, 255, 255));
        allElementsButton.setText("All Elements");
        allElementsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        allElementsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        allElementsButton.setIconTextGap(1);
        allElementsButton.setMargin(new java.awt.Insets(1, 14, 1, 14));
        allElementsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cursorButtonChangeColor(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseExitChangeColor(evt);
            }
        });
        allElementsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allElementsButtonActionPerformed(evt);
            }
        });
        getContentPane().add(allElementsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, 120, 30));

        jScrollPane3.setBorder(null);
        jScrollPane3.setAutoscrolls(true);

        currentDisplayedList.setBackground(new java.awt.Color(153, 153, 153));
        currentDisplayedList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        currentDisplayedList.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        currentDisplayedList.setDropMode(javax.swing.DropMode.ON);
        currentDisplayedList.setVisibleRowCount(9);
        currentDisplayedList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ListMousePressed(evt);
            }
        });
        currentDisplayedList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                listKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(currentDisplayedList);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, 360, 320));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgroundImage.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        jLabel2.setPreferredSize(new java.awt.Dimension(900, 500));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lanthenidesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lanthenidesButtonActionPerformed
        // TODO add your handling code here:
        //displayElements(allElements);
       //allElements.displayListForward();
       int range1 = 57;
       int range2 = 71;
       
       ArrayList<Element> lanthenides = new ArrayList<Element>(); 
       for(int i = 0 ;i< fullElements.size(); i++){
            int val = fullElements.get(i).getNumber();
            if(val >= range1 && val <= range2){
               lanthenides.add(fullElements.get(i));
           }
       }
       printedList = lanthenides;
       displayElements();
    }//GEN-LAST:event_lanthenidesButtonActionPerformed

    private void actinidesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actinidesButtonActionPerformed
        // TODO add your handling code here:
        int range1 = 89;
        int range2 = 103;
        ArrayList<Element> actinides = new ArrayList<Element>(); 
        for(int i = 0 ;i< fullElements.size(); i++){
             int val = fullElements.get(i).getNumber();
             if(val >= range1 && val <= range2){
                actinides.add(fullElements.get(i));
            }
        }
        printedList = actinides;
        displayElements();
    }//GEN-LAST:event_actinidesButtonActionPerformed

    private void transitionMetalsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transitionMetalsButtonActionPerformed
        // TODO add your handling code here:
        int [] ranges = {21,30, 39, 48, 72, 80, 104, 112}; //these ranges are inclusive
        ArrayList<Element> transitionList = new ArrayList<Element>();
        for(int i = 0; i < fullElements.size(); i++){
            int val = fullElements.get(i).getNumber();
            if(val >= ranges[0] && val <= ranges[1]){
                transitionList.add(fullElements.get(i));
            }
            if(val >= ranges[2] && val <= ranges[3]){
                transitionList.add(fullElements.get(i));
            }
            if(val >= ranges[4] && val <= ranges[5]){
                transitionList.add(fullElements.get(i));
            }
            if(val >= ranges[6] && val <= ranges[7]){
                transitionList.add(fullElements.get(i));
            }
        }
        printedList = transitionList;
        displayElements();
    }//GEN-LAST:event_transitionMetalsButtonActionPerformed

    private void BackToHomepageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToHomepageActionPerformed
        this.setVisible(false);
        StartPage stg = new StartPage();
        stg.setVisible(true);
    }//GEN-LAST:event_BackToHomepageActionPerformed

    private void SortTypeSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortTypeSelected
        // TODO add your handling code here:
        String sortType = (String)sortTypeSelected.getSelectedItem();
        //System.out.println(sortType);
        if(sortType != null){
            switch (sortType){
                case " ":
                    System.out.println("no sort is selected: ");
                    break;
                case "Name Ascending": //0
                    sortName(printedList, 0);
                    break;
                case "Name Descending": //1
                    sortName(printedList, 1);
                    break;
                case "Symbol Ascending": //2
                    sortSymbol(printedList, 0);
                    break;
                case "Symbol Descending": //3
                    sortSymbol(printedList, 1);
                    break;
                case "Increasing Atomic Number"://4
                    sortNumber(printedList, 0);
                    break;
                case "Decreasing Atomic Number"://5
                    sortNumber(printedList, 1);
                    break;
                case "Increasing Atomic Weight"://6
                    sortWeight(printedList, 0);
                    break;
                case "Decreasing Atomic Weight"://7
                    sortWeight(printedList, 1);
                    break;
                case "Increasing Melting Point"://8
                    sortMelting(printedList, 0);
                    break;
                case "Decreasing Melting Point"://9
                    sortMelting(printedList, 1);
                    break;
                case "Increasing Boiling Point"://10
                    sortBoiling(printedList, 0);
                    break;
                case "Decreasing Boiling Point"://11
                    sortBoiling(printedList, 1);
                    break;
                default:
                    
            }
        }
    }//GEN-LAST:event_SortTypeSelected

    private void allElementsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allElementsButtonActionPerformed
        // TODO add your handling code here:
        printedList = fullElements; 
        for(int i = 0; i < printedList.size(); i++){
            //System.out.println("The printedList :" + printedList.get(i).getName() + " The full list: " + fullElements.get(i).getName());
        }
        displayElements();
    }//GEN-LAST:event_allElementsButtonActionPerformed

    private void gasesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gasesButtonActionPerformed
        // TODO add your handling code here:
        int [] nobleGases = {3,10,18,36,54,86,118};
        ArrayList<Element> gases = new ArrayList<Element>();
        for(int i = 0; i < fullElements.size(); i++){
            int val = fullElements.get(i).getNumber();
            for(int j = 0; j< nobleGases.length; j++){
                if(nobleGases[j] == val){
                    gases.add(fullElements.get(i));
                }
            }
        }
        printedList = gases;
        displayElements();
    }//GEN-LAST:event_gasesButtonActionPerformed

    private void halogensButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_halogensButtonActionPerformed
        // TODO add your handling code here:
        int [] halogens = {9,17,35,53,85,117};
        ArrayList<Element> halogensList = new ArrayList<Element>();
        for(int i = 0; i < fullElements.size(); i++){
            int val = fullElements.get(i).getNumber();
            for(int j = 0; j< halogens.length; j++){
                if(halogens[j] == val){
                    halogensList.add(fullElements.get(i));
                }
            }
        }
        printedList = halogensList;
        displayElements();
        
    }//GEN-LAST:event_halogensButtonActionPerformed

    private void alkaliButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alkaliButtonActionPerformed
        // TODO add your handling code here:
        int [] alkali = {3,11,19,37,55,87};
        ArrayList<Element> alkaliList = new ArrayList<Element>();
        for(int i = 0; i < fullElements.size(); i++){
            int val = fullElements.get(i).getNumber();
            for(int j = 0; j< alkali.length; j++){
                if(alkali[j] == val){
                    alkaliList.add(fullElements.get(i));
                }
            }
        }
        printedList = alkaliList;
        displayElements();
    }//GEN-LAST:event_alkaliButtonActionPerformed

    boolean isInside(Rectangle temp, int cursorx, int cursory){ //my own contains method
        boolean inside = false;
        if(cursorx >= 0 && cursorx <= temp.width){
            if(cursory >= 0 && cursory <= temp.height){
                inside = true;
            }
        }
        return inside;
    }
    
    private void cursorButtonChangeColor(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cursorButtonChangeColor
        // TODO add your handling code here:
        JButton imDone = null;
        if(evt.getSource() instanceof JButton){
            imDone =(JButton)evt.getSource(); 
        }
        
        if(imDone != null){
            if(isInside(imDone.getBounds(), evt.getPoint().x, evt.getPoint().y)== true ){
                if(evt.getSource() == allElementsButton){
                    allElementsButton.setForeground(Color.GRAY);
                }else if(evt.getSource() == transitionMetalsButton){
                    transitionMetalsButton.setForeground(Color.GRAY);
                }else if(evt.getSource() == alkaliButton){
                    alkaliButton.setForeground(Color.GRAY);
                }else if(evt.getSource() == halogensButton){
                    halogensButton.setForeground(Color.GRAY);
                }else if(evt.getSource() == gasesButton){
                    gasesButton.setForeground(Color.GRAY);
                }else if(evt.getSource() == actinidesButton){
                    actinidesButton.setForeground(Color.GRAY);
                }else if(evt.getSource() == lanthenidesButton){
                    lanthenidesButton.setForeground(Color.GRAY);
                }else if(evt.getSource() == BackToHomepage){
                    BackToHomepage.setForeground(Color.GRAY);
                }
            }
        }
    }//GEN-LAST:event_cursorButtonChangeColor

    private void mouseExitChangeColor(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseExitChangeColor
        // TODO add your handling code here:
        allElementsButton.setForeground(Color.WHITE);
        transitionMetalsButton.setForeground(Color.WHITE);
        alkaliButton.setForeground(Color.WHITE);
        halogensButton.setForeground(Color.WHITE);
        gasesButton.setForeground(Color.WHITE);
        actinidesButton.setForeground(Color.WHITE);
        lanthenidesButton.setForeground(Color.WHITE);
        BackToHomepage.setForeground(Color.WHITE);
    }//GEN-LAST:event_mouseExitChangeColor

    private void ListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListMousePressed
        // TODO add your handling code here:
        String temp;
        DefaultListModel m = new DefaultListModel();
        //System.out.println("The current element slected is: " + displayList.getSelectedValue());
        //System.out.println(allElements.head.previous.getName());
        if(currentDisplayedList.getSelectedValue() != null){
            temp = currentDisplayedList.getSelectedValue().replaceAll("\\s", "");
            Element curr = null;
            for(int i = 0; i< fullElements.size(); i++){
                if(fullElements.get(i).getName().equals(temp)){
                    curr = fullElements.get(i);
                }
            }
            //System.out.println(curr.getName());
            if(curr != null){
                displayElementInfo.setText(
                    "Element Name: " + curr.getName()
                    +"\nAtomic Number: " + curr.getNumber()
                    +"\nElement Symbol: " + curr.getSymbol()
                    +"\nAtomic Weight: " + curr.getWeight()
                    +"\nMelting Point: " + curr.getMelting()
                    +"\nBoiling Point: " + curr.getBoiling()
                );
            }
        }
    }//GEN-LAST:event_ListMousePressed

    private void listKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listKeyPressed
        // TODO add your handling code here:
        int keyCode = evt.getKeyCode();
        String temp;
        temp = currentDisplayedList.getSelectedValue().replaceAll("\\s", "");
        if(keyCode == 38 || keyCode == 40){
            if(currentDisplayedList.getSelectedValue() != null){
                Element curr = null;
                for(int i = 0; i< fullElements.size(); i++){
                    if(fullElements.get(i).getName().equals(temp)){
                        curr = fullElements.get(i);
                    }
                }
                if(curr != null){
                    //jScrollPane2.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
                    //displayElementInfo.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
                    
                    
                    displayElementInfo.setLineWrap(true);
                    displayElementInfo.setWrapStyleWord(true);
                    displayElementInfo.setText(
                        "Element Name: " + curr.getName()
                        +"\nAtomic Number: " + curr.getNumber()
                        +"\nElement Symbol: " + curr.getSymbol()
                        +"\nAtomic Weight: " + curr.getWeight()
                        +"\nMelting Point: " + curr.getMelting()
                        +"\nBoiling Point: " + curr.getBoiling()
                    );
                }
            }
        }
    }//GEN-LAST:event_listKeyPressed
  

    public void sortName(ArrayList<Element> temp, int num){
        ArrayList<Element> listElement = temp;
        for(int i = 0; i< listElement.size()-1; i++){
            for(int j = 0; j < listElement.size()-(i+1); j++ ){
                if(num == 0 || num == 1){
                    int val = listElement.get(j).getName().compareTo(listElement.get(j+1).getName());
                    if( val > 0 && num == 0 ){ //compare the numbers
                        Element tp = listElement.get(j);
                        listElement.set(j, listElement.get(j+1));
                        listElement.set(j+1, tp); 
                    }else if(val < 0 && num == 1){
                        Element tp = listElement.get(j+1);
                        listElement.set(j+1, listElement.get(j));
                        listElement.set(j, tp); 
                    }
                }
            }
        }
        printedList = listElement;
        displayElements();
    }        
    public void sortNumber(ArrayList<Element> temp, int num){
        ArrayList<Element> listElement = temp;
        
        for(int i = 0; i< listElement.size()-1; i++){
            for(int j = 0; j < listElement.size()-(i+1); j++ ){
                if(num == 0 || num == 1){
                    
                    if( listElement.get(j).getNumber() > listElement.get(j+1).getNumber() && num == 0 ){ //compare the numbers
                        //3 step swap
                        Element tp = listElement.get(j);
                        listElement.set(j, listElement.get(j+1));
                        listElement.set(j+1, tp); 
                    }else if(listElement.get(j).getNumber() < listElement.get(j+1).getNumber() && num == 1){
                        Element tp = listElement.get(j+1);
                        listElement.set(j+1, listElement.get(j));
                        listElement.set(j, tp); 
                    }
                }
            }
        }
        printedList = listElement;
        displayElements();
    }      
    public void sortWeight(ArrayList<Element> temp, int num){
        ArrayList<Element> listElement = temp;
        
        for(int i = 0; i< listElement.size()-1; i++){
            for(int j = 0; j < listElement.size()-(i+1); j++ ){
                if(num == 0 || num == 1){
                    
                    if( listElement.get(j).getWeight() > listElement.get(j+1).getWeight() && num == 0 ){ //compare the numbers
                        //3 step swap
                        Element tp = listElement.get(j);
                        listElement.set(j, listElement.get(j+1));
                        listElement.set(j+1, tp); 
                    }else if(listElement.get(j).getWeight() < listElement.get(j+1).getWeight() && num == 1){
                        Element tp = listElement.get(j+1);
                        listElement.set(j+1, listElement.get(j));
                        listElement.set(j, tp); 
                    }
                }
            }
        }
        printedList = listElement;
        displayElements();
    }      
    public void sortMelting(ArrayList<Element> temp, int num){
        ArrayList<Element> listElement = temp;
        
        for(int i = 0; i< listElement.size()-1; i++){
            for(int j = 0; j < listElement.size()-(i+1); j++ ){
                if(num == 0 || num == 1){
                    
                    if( listElement.get(j).getMelting() > listElement.get(j+1).getMelting() && num == 0 ){ //compare the numbers
                        //3 step swap
                        Element tp = listElement.get(j);
                        listElement.set(j, listElement.get(j+1));
                        listElement.set(j+1, tp); 
                    }else if(listElement.get(j).getMelting() < listElement.get(j+1).getMelting() && num == 1){
                        Element tp = listElement.get(j+1);
                        listElement.set(j+1, listElement.get(j));
                        listElement.set(j, tp); 
                    }
                }
            }
        }
        printedList = listElement;
        displayElements();
    }     
    public void sortBoiling(ArrayList<Element> temp, int num){
        ArrayList<Element> listElement = temp;
        
        for(int i = 0; i< listElement.size()-1; i++){
            for(int j = 0; j < listElement.size()-(i+1); j++ ){
                if(num == 0 || num == 1){
                    
                    if( listElement.get(j).getBoiling() > listElement.get(j+1).getBoiling() && num == 0 ){ //compare the numbers
                        //3 step swap
                        Element tp = listElement.get(j);
                        listElement.set(j, listElement.get(j+1));
                        listElement.set(j+1, tp); 
                    }else if(listElement.get(j).getBoiling() < listElement.get(j+1).getBoiling() && num == 1){
                        Element tp = listElement.get(j+1);
                        listElement.set(j+1, listElement.get(j));
                        listElement.set(j, tp); 
                    }
                }
            }
        }
        printedList = listElement;
        displayElements();
    }     
    public void sortSymbol(ArrayList<Element> temp, int num){
        ArrayList<Element> listElement = temp;
        
        for(int i = 0; i< listElement.size()-1; i++){
            for(int j = 0; j < listElement.size()-(i+1); j++ ){
                if(num == 0 || num == 1){
                    int val = listElement.get(j).getSymbol().compareTo(listElement.get(j+1).getSymbol());
                    if( val > 0 && num == 0 ){ //compare the numbers
                        //3 step swap
                        Element tp = listElement.get(j);
                        listElement.set(j, listElement.get(j+1));
                        listElement.set(j+1, tp); 
                    }else if(val < 0 && num == 1){
                        Element tp = listElement.get(j+1);
                        listElement.set(j+1, listElement.get(j));
                        listElement.set(j, tp); 
                    }
                }
            }
        }
        printedList = listElement;
        displayElements();
    }     
    
    public class TransparentListCellRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            setForeground(Color.WHITE);
            setOpaque(isSelected);
            Border emptyBorder = BorderFactory.createEmptyBorder();
            this.setBorder(emptyBorder);
            jScrollPane3.setBorder(emptyBorder);
            this.setHorizontalAlignment(SwingConstants.CENTER);   
            return this;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReviewPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReviewPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReviewPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReviewPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ReviewPage(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToHomepage;
    private javax.swing.JButton actinidesButton;
    private javax.swing.JButton alkaliButton;
    private javax.swing.JButton allElementsButton;
    private javax.swing.JList<String> currentDisplayedList;
    private javax.swing.JTextArea displayElementInfo;
    private javax.swing.JButton gasesButton;
    private javax.swing.JButton halogensButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton lanthenidesButton;
    private javax.swing.JComboBox<String> sortTypeSelected;
    private javax.swing.JButton transitionMetalsButton;
    // End of variables declaration//GEN-END:variables
}


